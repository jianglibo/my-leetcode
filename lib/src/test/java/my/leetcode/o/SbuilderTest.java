package my.leetcode.o;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.Arrays;
import java.util.Comparator;
import java.util.concurrent.Executors;
import java.util.function.Function;
import java.util.stream.IntStream;
import org.junit.jupiter.api.Test;
import lombok.extern.slf4j.Slf4j;


@Slf4j
public class SbuilderTest {

	@Test
	void someLibraryMethodReturnsTrue() {
		StringBuilder sb = new StringBuilder("123456");
		assertEquals("23456", sb.delete(0, 1).toString());
		assertEquals("2456", sb.delete(1, 2).toString());
		assertEquals(1, sb.indexOf("5"));
		var c = new Comparator<int[]>() {
			@Override
			public int compare(int[] arg0, int[] arg1) {
				// TODO Auto-generated method stub
				return 0;
			}

		};
	}

	@Test
	void arrayGen() {
		String raw = """
				[[366,366],[632,632],[459,459],[445,445],[676,676],[78,78],[266,266],[3,3],[701,701],[146,146],[916,916],[292,292],[709,709],[19,19],[72,72],[340,340],[622,622],[333,333],[521,521],[238,238],[97,97],[437,437],[838,838],[703,703],[887,887],[264,264],[719,719],[802,802],[610,610],[462,462],[282,282],[328,328],[354,354],[407,407],[418,418],[102,102],[980,980],[927,927],[273,273],[118,118],[180,180],[650,650],[456,456],[167,167],[623,623],[230,230],[734,734],[310,310],[960,960],[673,673],[831,831],[512,512],[16,16],[11,11],[692,692],[200,200],[390,390],[711,711],[934,934],[778,778],[260,260],[471,471],[358,358],[231,231],[213,213],[377,377],[639,639],[533,533],[7,7],[775,775],[448,448],[784,784],[688,688],[665,665],[830,830],[994,994],[392,392],[218,218],[601,601],[940,940],[880,880],[651,651],[252,252],[217,217],[446,446],[426,426],[919,919],[627,627],[65,65],[401,401],[743,743],[272,272],[982,982],[985,985],[474,474],[348,348],[255,255],[368,368],[518,518],[166,166],[435,435],[215,215],[647,647],[573,573],[294,294],[225,225],[60,60],[149,149],[393,393],[193,193],[582,582],[750,750],[257,257],[129,129],[626,626],[531,531],[605,605],[548,548],[176,176],[695,695],[283,283],[587,587],[413,413],[741,741],[645,645],[852,852],[637,637],[194,194],[335,335],[4,4],[135,135],[175,175],[223,223],[877,877],[17,17],[232,232],[99,99],[661,661],[746,746],[185,185],[110,110],[405,405],[8,8],[822,822],[45,45],[51,51],[399,399],[227,227],[824,824],[241,241],[910,910],[588,588],[593,593],[654,654],[820,820],[144,144],[507,507],[137,137],[993,993],[262,262],[326,326],[722,722],[956,956],[288,288],[493,493],[568,568],[183,183],[158,158],[298,298],[779,779],[250,250],[875,875],[912,912],[13,13],[749,749],[473,473],[234,234],[604,604],[584,584],[153,153],[96,96],[134,134],[312,312],[400,400],[245,245],[773,773],[36,36],[492,492],[923,923],[556,556],[495,495],[909,909],[938,938],[736,736],[410,410],[398,398],[845,845],[509,509],[208,208],[151,151],[140,140],[74,74],[908,908],[965,965],[249,249],[214,214],[502,502],[823,823],[256,256],[491,491],[939,939],[460,460],[290,290],[481,481],[783,783],[933,933],[571,571],[369,369],[323,323],[105,105],[666,666],[812,812],[402,402],[524,524],[920,920],[551,551],[40,40],[971,971],[362,362],[981,981],[195,195],[725,725],[101,101],[757,757],[90,90],[918,918],[478,478],[265,265],[578,578],[537,537],[43,43],[465,465],[894,894],[206,206],[900,900],[235,235],[995,995],[412,412],[155,155],[496,496],[461,461],[427,427],[800,800],[962,962],[104,104],[634,634],[669,669],[162,162],[55,55],[12,12],[210,210],[694,694],[801,801],[25,25],[853,853],[745,745],[397,397],[723,723],[89,89],[247,247],[872,872],[681,681],[865,865],[752,752],[926,926],[59,59],[606,606],[143,143],[864,864],[503,503],[941,941],[526,526],[327,327],[431,431],[561,561],[735,735],[35,35],[119,119],[197,197],[569,569],[293,293],[510,510],[658,658],[659,659],[356,356],[570,570],[721,721],[263,263],[179,179],[950,950],[141,141]]""";
		System.out.println(
				"int[][] ars = " + raw.replace('[', '{').replace(']', '}') + ";");
		assertTrue(true);
	}

	@Test
	void tArrays() {
		int[] ary = {1, 6, 3, 4, 0};
		log.info(Arrays.toString(ary));
		assertThat(Arrays.toString(ary)).isEqualTo("[1, 6, 3, 4, 0]");
		Arrays.sort(ary, 1, ary.length);
		assertThat(Arrays.toString(ary)).isEqualTo("[1, 0, 3, 4, 6]");
		// Arrays.sort(null, 0, 0, null);
		// BiFunction bi = (a, b) -> a - b;
		// Arrays.sort(ary, 1, ary.length, (a, b) -> Integer.compare(a, b));
		// Comparator<Integer> c = (int a, int b) -> Integer.compare(a, b);
		// Arrays.sort(ary, 0, 0, c);
		// Arrays.sort(ary, 0, 0, (Integer a, Integer b) -> Integer.compare(a, b));
		Integer[] oary = IntStream.of(ary).boxed().toArray(Integer[]::new);
		oary = IntStream.of(ary).boxed().toArray(i -> new Integer[i]);
		Function<Integer, int[]> o = int[]::new;
		// Collectors.mapping(null, null)
		String s = """
				hello
			world""";
		assertThat(s).isEqualTo("\thello" + System.lineSeparator() + "world");

		Executors.defaultThreadFactory().newThread(() -> {

		});
		
	}



}
